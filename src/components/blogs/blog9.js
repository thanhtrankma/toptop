import React from 'react';
import { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';
import { darcula } from 'react-syntax-highlighter/dist/esm/styles/prism';

const ClosuresScopeHoisting = () => {
  return (
    <section>
      <h1>Closures, Scope, v√† Hoisting trong JavaScript</h1>
      <p>Hi·ªÉu r√µ c√°c kh√°i ni·ªám n√†y ƒë·ªÉ tr√°nh c√°c l·ªói ph·ªï bi·∫øn v√† c·∫£i thi·ªán hi·ªáu su·∫•t code.</p>

      <h2>1. Scope (Ph·∫°m vi bi·∫øn)</h2>
      <p>Scope x√°c ƒë·ªãnh n∆°i c√≥ th·ªÉ truy c·∫≠p m·ªôt bi·∫øn trong m√£. C√≥ ba lo·∫°i scope ch√≠nh:</p>
      <ul>
        <li>
          <strong>Global Scope</strong>: Bi·∫øn c√≥ th·ªÉ truy c·∫≠p t·ª´ b·∫•t k·ª≥ ƒë√¢u.
        </li>
        <li>
          <strong>Function Scope</strong>: Bi·∫øn ch·ªâ c√≥ th·ªÉ truy c·∫≠p trong m·ªôt h√†m.
        </li>
        <li>
          <strong>Block Scope</strong>: V·ªõi <code>let</code> v√† <code>const</code>, bi·∫øn ch·ªâ c√≥ th·ªÉ truy c·∫≠p trong kh·ªëi{' '}
          {} ch·ª©a n√≥.
        </li>
      </ul>
      <SyntaxHighlighter language="javascript" style={darcula} wrapLines showInlineLineNumbers>
        {`function testScope() {
  let localVar = "T√¥i ch·ªâ t·ªìn t·∫°i trong h√†m n√†y";
  console.log(localVar);
}

testScope();
console.log(localVar); // L·ªói: localVar kh√¥ng ƒë∆∞·ª£c ƒë·ªãnh nghƒ©a`}
      </SyntaxHighlighter>

      <h2>2. Closures</h2>
      <p>
        Closure x·∫£y ra khi m·ªôt h√†m b√™n trong c√≥ th·ªÉ truy c·∫≠p c√°c bi·∫øn t·ª´ ph·∫°m vi b√™n ngo√†i c·ªßa n√≥ ngay c·∫£ sau khi ph·∫°m
        vi ƒë√≥ ƒë√£ k·∫øt th√∫c.
      </p>
      <ul>
        <li>Closure r·∫•t h·ªØu √≠ch trong vi·ªác t·∫°o ra c√°c h√†m c√≥ tr·∫°ng th√°i ri√™ng.</li>
        <li>C√≥ th·ªÉ d√πng trong c√°c h√†m callback ho·∫∑c khi c·∫ßn gi·ªØ tr·∫°ng th√°i m√† kh√¥ng l√†m l·ªô bi·∫øn ra to√†n c·ª•c.</li>
      </ul>
      <SyntaxHighlighter language="javascript" style={darcula} wrapLines showInlineLineNumbers>
        {`function createCounter() {
  let count = 0;
  return function() {
    count++;
    return count;
  };
}

const counter = createCounter();
console.log(counter()); // 1
console.log(counter()); // 2
console.log(counter()); // 3`}
      </SyntaxHighlighter>

      <h2>3. Hoisting</h2>
      <p>Hoisting l√† c∆° ch·∫ø gi√∫p c√°c khai b√°o bi·∫øn v√† h√†m ƒë∆∞·ª£c ƒë·∫©y l√™n ƒë·∫ßu ph·∫°m vi tr∆∞·ªõc khi th·ª±c thi m√£.</p>
      <ul>
        <li>
          Ch·ªâ c√≥ <code>var</code> v√† <code>function</code> ƒë∆∞·ª£c hoisted ƒë·∫ßy ƒë·ªß.
        </li>
        <li>
          <code>let</code> v√† <code>const</code> v·∫´n ƒë∆∞·ª£c hoisted nh∆∞ng kh√¥ng th·ªÉ truy c·∫≠p tr∆∞·ªõc khi khai b√°o.
        </li>
      </ul>
      <SyntaxHighlighter language="javascript" style={darcula} wrapLines showInlineLineNumbers>
        {`console.log(hoistedVar); // undefined
var hoistedVar = "T√¥i ƒë√£ ƒë∆∞·ª£c hoisted!";

hoistedFunction(); // "T√¥i ƒë∆∞·ª£c hoisted!"
function hoistedFunction() {
  console.log("T√¥i ƒë∆∞·ª£c hoisted!");
}

console.log(letVar); // L·ªói: Cannot access 'letVar' before initialization
let letVar = "Kh√¥ng ƒë∆∞·ª£c hoisted gi·ªëng var";`}
      </SyntaxHighlighter>

      <h2>üìå T·ªïng k·∫øt</h2>
      <ul>
        <li>
          <strong>Scope</strong>: X√°c ƒë·ªãnh ph·∫°m vi t·ªìn t·∫°i c·ªßa bi·∫øn, c√≥ Global, Function v√† Block Scope.
        </li>
        <li>
          <strong>Closures</strong>: Cho ph√©p h√†m con ghi nh·ªõ ph·∫°m vi c·ªßa n√≥ ngay c·∫£ khi h√†m cha ƒë√£ k·∫øt th√∫c.
        </li>
        <li>
          <strong>Hoisting</strong>: Bi·∫øn <code>var</code> v√† h√†m ƒë∆∞·ª£c ƒë∆∞a l√™n ƒë·∫ßu ph·∫°m vi tr∆∞·ªõc khi ch·∫°y, nh∆∞ng{' '}
          <code>let</code> v√† <code>const</code> kh√¥ng th·ªÉ truy c·∫≠p tr∆∞·ªõc khi khai b√°o.
        </li>
      </ul>
    </section>
  );
};

export default ClosuresScopeHoisting;
